class CheckSum
{   
  public static int[] findSum(int[] arr, int n) 
  {
    int[] result = new int[2];
    // write your code here
    //first sort the array and then calculate
    // calling quick sort function
    quickSort(arr,0, arr.length-1);
    // array is sorted, now find the element
    //Arrays.sort(arr);
    int start=0;
    int end = arr.length-1;
    while (start<end)
    {
      if (arr[start]+arr[end]==n)
      {
        result[0]=arr[start];
        result[1]=arr[end];
        return result;
      }
      else if (arr[start]+arr[end]<n)
      {
        start++;
      }
      else
      end--;
    }

    return result;   // return the elements in the array whose sum is equal to the value passed as parameter 
  }

  static void swap(int[] arr, int i, int j)
{
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}
static int partition(int[] arr, int low, int high)
{
     
    // pivot
    int pivot = arr[high];
     
    // Index of smaller element and
    // indicates the right position
    // of pivot found so far
    int i = (low - 1);
 
    for(int j = low; j <= high - 1; j++)
    {
         
        // If current element is smaller
        // than the pivot
        if (arr[j] < pivot)
        {
             
            // Increment index of
            // smaller element
            i++;
            swap(arr, i, j);
        }
    }
    swap(arr, i + 1, high);
    return (i + 1);
}
static void quickSort(int[] arr, int low, int high)
{
    if (low < high)
    {
         
        // pi is partitioning index, arr[p]
        // is now at right place
        int pi = partition(arr, low, high);
 
        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
 /* static void quickSort(int[] arr, int start,int end)
  { 
     if (start<end)
     {
     int pIndex = partition(arr,start,end);
     quickSort(arr,start,pIndex-1);
     quickSort(arr,pIndex+1,end);
     }
      
  }

  static int partition(int[] arr, int start , int end)
  {
     int pivot =arr[end];
     int pIndex= start;
     for (int i =start;i<end;i++)
     {
       if (arr[i]<=pivot)
       {
         //swap if element is less than pivot
         int temp = arr[i];
         arr[i]= arr[pIndex];
         arr[pIndex]=temp;
         pIndex++;
       }

     }
     //swap pIndex and end;
     int temp = arr[pIndex];
     arr[pIndex] = arr[end];
     arr[end]= arr[pIndex];

     return pIndex; 
  }*/
}
