class ListNode {
  int value = 0;
  ListNode next;

  ListNode(int value) {
    this.value = value;
  }
}

class LinkedListCycleStart {

  public static ListNode findCycleStart(ListNode head) {
    // TODO: Write your code here

    int len = lengthOfTheCycle(head);
    ListNode secondptr=head;

    int i=0;
    while (i<len)
    {
      secondptr = secondptr.next;
      i++;
    }

    ListNode firstPtr= head;
    while (firstPtr!=secondptr)
    {
      firstPtr= firstPtr.next;
      secondptr= secondptr.next;

      if (firstPtr==secondptr){
        return firstPtr;
      }
    }
    return head;
  }

  public static ListNode intersectionPt(ListNode head) {
    // TODO: Write your code here
    ListNode slow = head;
    ListNode fast = head;
    
    while (fast!=null && fast.next!=null)
    {
      fast = fast.next.next;
      slow = slow.next;
      if (fast==slow)
      {
        return slow;
      
      }
    }
    return null;
  }

  public static int lengthOfTheCycle(ListNode head) {
    
    ListNode slow= intersectionPt(head);
    ListNode lengthptr = slow.next;
    int i=1;

    while (slow!=lengthptr)
    {
      lengthptr= lengthptr.next;
      i++;
    }
    return i;

  }


  public static void main(String[] args) {
    ListNode head = new ListNode(1);
    head.next = new ListNode(2);
    head.next.next = new ListNode(3);
    head.next.next.next = new ListNode(4);
    head.next.next.next.next = new ListNode(5);
    head.next.next.next.next.next = new ListNode(6);

    head.next.next.next.next.next.next = head.next.next;
    System.out.println("LinkedList cycle start: " + LinkedListCycleStart.findCycleStart(head).value);

    head.next.next.next.next.next.next = head.next.next.next;
    System.out.println("LinkedList cycle start: " + LinkedListCycleStart.findCycleStart(head).value);

    head.next.next.next.next.next.next = head;
    System.out.println("LinkedList cycle start: " + LinkedListCycleStart.findCycleStart(head).value);
  }
}
